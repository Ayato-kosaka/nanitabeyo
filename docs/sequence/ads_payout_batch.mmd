sequenceDiagram
    %% cron → NestJS queue consumer
    participant Scheduler
    participant Worker
    participant Database
    %% Stripe
    participant ExternalAPI as 外部API
    %% Push／メール通知サービス
    participant Notifier
%% ─────────────────────────────────────────────────────────────
    Note over Scheduler,Worker: 毎日 00:10 JST に前日終了分を精算
    Scheduler ->> Worker: dispatch payoutBatch(runDate=CURRENT_DATE‑1)

    %% 昨日で終了した Bid を取得
    Worker ->> Database: SELECT *<br>FROM restaurant_bids<br>WHERE end_date  < CURRENT_DATE<br>AND status    = 'confirmed';

    loop each bid
        %% 成績集計（Bid の 30日窓）
        Worker ->> Database: SELECT dm.creator_id,<br>dm.dish_media_id,<br><br>FROM dish_media_likes  dl<br>JOIN dish_media  dm USING(dish_media_id)<br>WHERE dm.restaurant_id = :bid.restaurant_id<br>AND dl.created_at BETWEEN :bid.start_date AND :bid.end_date<br>GROUP BY dm.creator_id, dm.dish_media_id;

        Worker ->> Worker: totalLikes = Σlikes
        alt totalLikes > 0
            loop each row
                Worker ->> Worker: share = FLOOR(bid.amount_cents * 0.70 * likes / totalLikes)
                Worker ->> ExternalAPI: transfers.create<br>(destination=creator.stripe_account_id,amount=share)
                    ExternalAPI ->> Worker: {transferId}
                Worker ->> Database: INSERT INTO payouts<br>(bid_id, dish_media_id, creator_id,<br>amount_cents, transfer_id, status)<br>VALUES (:bidId,:mediaId,:creatorId,:share,:transferId,'paid');
                %% クリエイターへ送金通知
                Worker ->> Notifier: push<br>{to:creator_id,<br>title:"送金完了",<br>body:`¥${share/100} を受け取りました`}
                    Notifier -->> Worker: ok
            end
            Worker ->> Database: UPDATE restaurant_bids<br>SET status='distributed', distributed_at=NOW()<br>WHERE bid_id = :bidId;
            %% オーナー(入札者)へ分配完了通知
            Worker ->> Notifier: push<br>{to:bid.user_id,<br>title:"分配完了",<br>body:"入札がクリエイターへ分配されました"}
                Notifier -->> Worker: ok
        else totalLikes == 0
            %% 全額返金
            Worker ->> ExternalAPI: refunds.create<br>(payment_intent=:bid.payment_intent_id,<br>amount=:bid.amount_cents)
                ExternalAPI ->> Worker: {refundId}
            Worker ->> Database: UPDATE restaurant_bids<br>SET status='refunded', refund_id=:refundId, distributed_at=NOW()<br>WHERE bid_id = :bidId;
            %% 入札者へ返金通知
            Worker ->> Notifier: push<br>{to:bid.user_id,<br>title:"返金完了",<br>body:"入札が全額返金されました"}
                Notifier -->> Worker: ok
        end
    end
