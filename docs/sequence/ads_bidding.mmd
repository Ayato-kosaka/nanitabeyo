sequenceDiagram
    participant User
    participant UI
    participant Backend
    participant Database
    %% (Stripe / Google Places)
    participant ExternalAPI as 外部API  
    %% BullMQ / queue
    participant Worker     
%% ─────────────────────────────────────────────────────────────────────────
    Note over User,UI: RestaurantMapScreen<br>(Google Map + 入札ピン)
    User ->> UI: mount -> getCurrentLocation
        UI ->> Backend: GET /v1/restaurants/search?lat, lng, radius, cursor
            Backend ->> Database: SELECT restaurants, SUM(amount_cents) AS total_cents<br>FROM restaurants<br>LEFT JOIN restaurant_bids<br>ON start_date <= CURRENT_DATE<br>AND end_date   >  CURRENT_DATE<br>AND status = 'confirmed'<br>GROUP BY restaurant_id;
            Backend ->> UI: {Restaurants, meta.totalCents}[], nextCursor
    User ->> UI: 「このエリアを検索」押下
        UI ->> Backend: GET /v1/restaurants/search?lat, lng, radius, cursor
    User ->> UI: Poiを選択<br>(restaurants or Google PLaces Restaurant)
        UI ->> UI: navigate(RestaurantScreen, {restaurantId})

%% ─────────────────────────────────────────────────────────────
    Note over User,UI: RestaurantScreen<br>(DishMedia + 入札総額表示)
        UI ->> Backend: GET /v1/restaurants/{id}/restaurant-bids<br>{cursor}
            Backend ->> Database: from(restaurant_bids)<br>where(restaurantId, cursor);
            Backend ->> UI: RestaurantBids[], nextCursor
        UI ->> User: 総額 ¥…, 残り n 日<br>SUM(amount_cents),（MIN(end_date)）
    User ->> UI: 「入札する」→ 金額入力
    User ->> UI: 「支払」押下
        %% PaymentIntent 発行
        UI ->> Backend: POST /v1/restaurants/{id}/bids/intents<br>{amountCents}
            Backend ->> ExternalAPI: PaymentIntent.create(amountCents)
                ExternalAPI ->> Backend: {clientSecret, intentId}
            Backend ->> UI: {clientSecret}
        %% カード決済
        UI ->> ExternalAPI: confirmPayment(clientSecret, cardInfo)
            ExternalAPI -->> UI: result
    alt result == succeeded
        %% Stripe Webhook
        ExternalAPI -->> Backend: payment_intent.succeeded
            Backend ->> Database: <br>INSERT INTO restaurant_bids<br>(user_id, restaurant_id, payment_intent_id,<br>amount_cents, start_date, end_date, status)<br>VALUES (:user, :restaurantId, :pi, :amt,<br>CURRENT_DATE, CURRENT_DATE + INTERVAL '30 days',<br>'confirmed');
            %% 通知キュー
            Backend ->> Worker: notifyNewBid(bidId)
    else result == failed
        ExternalAPI -->> Backend: payment_intent.payment_failed
            Backend ->> Database: INSERT INTO restaurant_bids(..., status='failed')
    end
    Backend ->> UI: {status}

%% ─────────────────────────────────────────────────────────────
    Note over User,UI: ProfileScreen<br>(Tabs: Deposits / Earnings)
    User ->> UI: open
        UI ->> Backend: GET /v1/users/me/restaurant-bids<br>{cursor}
            Backend ->> Database: SELECT ... ORDER BY created_at DESC
            Backend ->> UI: RestaurantBids[], nextCursor
        UI ->> Backend: GET /v1/users/me/payouts<br>{cursor}
            Backend ->> Database: SELECT ...
            Backend ->> UI: Payouts[], nextCursor
        UI ->> User: タブ表示
